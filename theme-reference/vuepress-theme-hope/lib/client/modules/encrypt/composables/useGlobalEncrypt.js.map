{"version":3,"file":"useGlobalEncrypt.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/useGlobalEncrypt.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC7D,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAG/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD,MAAM,WAAW,GAAG,4BAA4B,CAAC;AAOjD,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAkB,EAAE;IAClD,MAAM,WAAW,GAAG,gBAAgB,EAAE,CAAC;IAEvC,MAAM,YAAY,GAAG,UAAU,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACjD,MAAM,YAAY,GAAG,iBAAiB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAExD,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,EAAE;QAC3B,MAAM,EAAE,MAAM,GAAG,KAAK,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC;QAEpD,wBAAwB;QACxB,MAAM,WAAW,GAAG,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAE5D,MAAM,QAAQ;QACZ,qBAAqB;QACrB,WAAW;YACT,CAAC,CAAC,YAAY,CAAC,KAAK;gBAClB,CAAC,CAAC,4BAA4B;oBAC5B,oEAAoE;oBACpE,WAAW,CAAC,KAAK,CAAC,KAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5C,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CACtC;gBACH,CAAC,CAAC,4BAA4B;oBAC5B,oEAAoE;oBACpE,WAAW,CAAC,KAAK,CAAC,KAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAC5C,WAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CACtC;YACL,CAAC,CAAC,KAAK,CAAC;QAEZ,OAAO;YACL,WAAW;YACX,QAAQ;YACR,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,CAAC,UAAkB,EAAE,IAAI,GAAG,KAAK,EAAQ,EAAE;QAC1D,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;IAC1D,CAAC,CAAC;IAEF,OAAO;QACL,MAAM;QACN,QAAQ;KACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport { compareSync } from \"bcrypt-ts/browser\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\n\nimport type { EncryptStatus } from \"./typings.js\";\nimport { useEncryptConfig } from \"./useEncryptConfig.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_GLOBAL_TOKEN\";\n\nexport interface GlobalEncrypt {\n  status: ComputedRef<EncryptStatus>;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const useGlobalEncrypt = (): GlobalEncrypt => {\n  const encryptData = useEncryptConfig();\n\n  const storageToken = useStorage(STORAGE_KEY, \"\");\n  const sessionToken = useSessionStorage(STORAGE_KEY, \"\");\n\n  const status = computed(() => {\n    const { global = false, admin } = encryptData.value;\n\n    // Is globally encrypted\n    const isEncrypted = global && Boolean(admin?.tokens.length);\n\n    const isLocked =\n      // Valid token exists\n      isEncrypted\n        ? storageToken.value\n          ? // None of the token matches\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            encryptData.value.admin!.tokens.some((hash) =>\n              compareSync(storageToken.value, hash),\n            )\n          : // None of the token matches\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            encryptData.value.admin!.tokens.some((hash) =>\n              compareSync(sessionToken.value, hash),\n            )\n        : false;\n\n    return {\n      isEncrypted,\n      isLocked,\n      hint: admin?.hint ?? \"\",\n    };\n  });\n\n  const validate = (inputToken: string, keep = false): void => {\n    (keep ? storageToken : sessionToken).value = inputToken;\n  };\n\n  return {\n    status,\n    validate,\n  };\n};\n"]}