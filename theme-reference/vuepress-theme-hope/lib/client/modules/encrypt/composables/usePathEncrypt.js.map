{"version":3,"file":"usePathEncrypt.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/composables/usePathEncrypt.ts"],"names":[],"mappings":"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","sourcesContent":["import { isPlainObject, keys, startsWith } from \"@vuepress/helper/client\";\nimport { useSessionStorage, useStorage } from \"@vueuse/core\";\nimport type { ComputedRef } from \"vue\";\nimport { computed } from \"vue\";\nimport { usePageData } from \"vuepress/client\";\n\nimport { isTokenMatched } from \"@theme-hope/modules/encrypt/utils/index\";\n\nimport type { EncryptStatus } from \"./typings.js\";\nimport { useEncryptConfig } from \"./useEncryptConfig.js\";\n\nconst STORAGE_KEY = \"VUEPRESS_HOPE_PATH_TOKEN\";\n\nexport interface PathEncrypt {\n  status: ComputedRef<EncryptStatus>;\n  getStatus: (path: string) => EncryptStatus;\n  validate: (token: string, keep?: boolean) => void;\n}\n\nexport const usePathEncrypt = (): PathEncrypt => {\n  const page = usePageData();\n  const encryptData = useEncryptConfig();\n\n  const localTokenConfig = useStorage<Record<string, string>>(STORAGE_KEY, {});\n  const sessionTokenConfig = useSessionStorage<Record<string, string>>(\n    STORAGE_KEY,\n    {},\n  );\n\n  const getPathMatchedKeys = (path: string): string[] =>\n    isPlainObject(encryptData.value.config)\n      ? keys(encryptData.value.config)\n          .filter((key) => startsWith(decodeURI(path), key))\n          .sort((a, b) => b.length - a.length)\n      : [];\n\n  const getStatus = (path: string): EncryptStatus => {\n    const { config = {} } = encryptData.value;\n\n    const matchedKeys = getPathMatchedKeys(path);\n\n    if (matchedKeys.length > 0) {\n      const firstKeyWithHint = matchedKeys.find((key) => config[key].hint);\n\n      return {\n        isEncrypted: true,\n        isLocked: matchedKeys.some(\n          (key) =>\n            (localTokenConfig.value[key]\n              ? config[key].tokens.every(\n                  (token) =>\n                    !isTokenMatched(localTokenConfig.value[key], token),\n                )\n              : true) &&\n            (sessionTokenConfig.value[key]\n              ? config[key].tokens.every(\n                  (token) =>\n                    !isTokenMatched(sessionTokenConfig.value[key], token),\n                )\n              : true),\n        ),\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hint: firstKeyWithHint ? config[firstKeyWithHint].hint! : \"\",\n      };\n    }\n\n    return {\n      isEncrypted: false,\n      isLocked: false,\n      hint: \"\",\n    };\n  };\n\n  const status = computed(() => getStatus(page.value.path));\n\n  const validate = (inputToken: string, keep = false): void => {\n    const { config = {} } = encryptData.value;\n    const matchedKeys = getPathMatchedKeys(page.value.path);\n\n    // Some of the tokens matches\n    for (const hitKey of matchedKeys)\n      if (\n        config[hitKey].tokens.some((token) => isTokenMatched(inputToken, token))\n      ) {\n        (keep ? localTokenConfig : sessionTokenConfig).value[hitKey] =\n          inputToken;\n\n        break;\n      }\n  };\n\n  return {\n    status,\n    getStatus,\n    validate,\n  };\n};\n"]}