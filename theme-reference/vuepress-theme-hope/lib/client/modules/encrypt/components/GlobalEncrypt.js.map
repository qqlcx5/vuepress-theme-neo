{"version":3,"file":"GlobalEncrypt.js","sourceRoot":"","sources":["../../../../../src/client/modules/encrypt/components/GlobalEncrypt.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAEvD,OAAO,EAAE,UAAU,EAAE,MAAM,0CAA0C,CAAC;AACtE,OAAO,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AACxD,OAAO,aAAa,MAAM,sDAAsD,CAAC;AACjF,OAAO,EAAE,gBAAgB,EAAE,MAAM,+CAA+C,CAAC;AAEjF,eAAe,eAAe,CAAC;IAC7B,IAAI,EAAE,eAAe;IAErB,KAAK,EAAE,MAEL;IAEF,KAAK,CAAC,MAAM,EAAE,EAAE,KAAK,EAAE;QACrB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,gBAAgB,EAAE,CAAC;QAChD,MAAM,MAAM,GAAG,OAAO,EAAE,CAAC;QAEzB,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;QAE7B,SAAS,CAAC,GAAG,EAAE;YACb,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,OAAO,GAAU,EAAE;YACjB,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;YAErD,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,UAAU,EAAE,GAAG,EAAE,CACvD,WAAW;gBACT,CAAC,CAAC,SAAS,CAAC,KAAK;oBACf,CAAC,CAAC,QAAQ;wBACR,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE;4BACf,IAAI,EAAE,IAAI;4BACV,IAAI;4BACJ,QAAQ,EAAE,QAAQ;yBACnB,CAAC;wBACJ,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE;oBACnB,CAAC,CAAC,IAAI;gBACR,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CACpB,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CACF,CAAC,CAAC","sourcesContent":["import type { SlotsType, VNode } from \"vue\";\nimport { defineComponent, h, onMounted, ref } from \"vue\";\nimport { RenderDefault } from \"vuepress-shared/client\";\n\nimport { FadeSlideY } from \"@theme-hope/components/transitions/index\";\nimport { usePure } from \"@theme-hope/composables/index\";\nimport PasswordModal from \"@theme-hope/modules/encrypt/components/PasswordModal\";\nimport { useGlobalEncrypt } from \"@theme-hope/modules/encrypt/composables/index\";\n\nexport default defineComponent({\n  name: \"GlobalEncrypt\",\n\n  slots: Object as SlotsType<{\n    default: () => VNode[] | VNode | null;\n  }>,\n\n  setup(_props, { slots }) {\n    const { status, validate } = useGlobalEncrypt();\n    const isPure = usePure();\n\n    const isMounted = ref(false);\n\n    onMounted(() => {\n      isMounted.value = true;\n    });\n\n    return (): VNode => {\n      const { isEncrypted, isLocked, hint } = status.value;\n\n      return h(isPure.value ? RenderDefault : FadeSlideY, () =>\n        isEncrypted\n          ? isMounted.value\n            ? isLocked\n              ? h(PasswordModal, {\n                  full: true,\n                  hint,\n                  onVerify: validate,\n                })\n              : slots.default()\n            : null\n          : slots.default(),\n      );\n    };\n  },\n});\n"]}