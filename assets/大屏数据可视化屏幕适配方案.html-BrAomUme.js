import{_ as p,r as o,c as l,o as i,a as t,b as n,d as s,e}from"./app-7eMFvEA8.js";const c={},u=t(`<h1 id="大屏数据可视化屏幕适配方案" tabindex="-1"><a class="header-anchor" href="#大屏数据可视化屏幕适配方案" aria-hidden="true">#</a> 大屏数据可视化屏幕适配方案</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><blockquote><p>基于现目前所做数据可视化项目的不同分辨率兼容需求总结以下适配几种方案供参考。 通常而言数字大屏指的是1920*1080分辨率下的电视大屏，用于图表化的展示关键数据，然而项目大部分是在笔记本上运行，演示，测试，所以不得不把小屏笔记本纳入兼容范围。。。</p></blockquote><p>一、一些前提概念</p><h3 id="_1-1-常见大屏分辨率" tabindex="-1"><a class="header-anchor" href="#_1-1-常见大屏分辨率" aria-hidden="true">#</a> 1.1 常见大屏分辨率</h3><ul><li>1366 * 768 ： 普通液晶显示器</li><li>1920 * 1080： 高清液晶显示器</li><li>2560 * 1440： 2K高清显示器</li><li>4096 * 2160： 4K高清显示器</li><li>1280 * 720： 笔记本（1920*1080分辨率下系统默认推荐150%缩放比产生的尺寸。。。。）</li></ul><h3 id="_1-2-设备像素" tabindex="-1"><a class="header-anchor" href="#_1-2-设备像素" aria-hidden="true">#</a> 1.2 设备像素</h3><ul><li><code>viewport</code>： 视窗=浏览器窗口的宽高</li><li><code>物理像素（设备像素）</code>： 屏幕显示分辨率像素，每个像素可以根据操作系统设置自己的颜色 和亮度</li><li><code>设备独立像素（dip）</code>：密度无关像素，可以认为是计算机坐标系统中的一个点,可用于区分视网膜设备还是非视网膜设备</li><li><code>css像素（DIPs）</code>： 主要用在浏览器上，一般情况下，css像素称为与设备无关的像素</li><li><code>屏幕密度</code>： 设备表面上存在的像素数量（PPI）</li><li><code>设备像素比(dpr)</code>: 定义了物理像素和设备独立像素的对应关系，设备像素比=物理像素/设备独立像素</li></ul><p>二、适配痛点</p><ol><li>设计稿按照1920*1080的分辨率，16:9的比例设计， 实际开发中，document窗口不足16:9（高度减掉顶部tab及导航栏，地址栏等）</li><li>不同分辨率：实际应用场景中，显示场景不同，不能固定写死px单位</li><li>不同比例：不同的显示器宽高比与设计稿不一致</li><li>由于大屏数据可视化项目通常用于放在电视或广告屏上展示用，而不允许出现滚动条</li></ol><p>三、关于rem</p><blockquote><p>熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 手淘lib-flexible 方案。</p></blockquote><ul><li><strong>rem (font size of the root element)</strong>, 是 css3 的引入的一个大小单位。即相对于根元素的 font-size 值的大小。所谓根元素在网页里一般就是 html.</li><li>举例如下：</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span><span class="token punctuation">{</span>
 <span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>  
<span class="token selector">test1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 1.4rem<span class="token punctuation">;</span> //1.4 × 20px = 28px
<span class="token punctuation">}</span>
<span class="token selector">test2</span> <span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 2.4rem<span class="token punctuation">;</span> //2.4 × 20px = 48px
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常如果应用场景只涉及16:9比例下，1920*1080分辨率屏幕的话，使用rem来自动计算即可实现不同大小屏幕的适配</li></ul><p>四、关于px2rem</p><blockquote><p>在采用rem作为适配方案时，避免不了将设计稿中的px单位转化为rem单位，开发过程中如果每个值都手动计算免不了麻烦，通常作法：</p><ul><li>使用scss或less 函数进行计算</li><li>webpack结合postcss-px2rem自动计算</li></ul></blockquote>`,17),r=n("li",null,[n("strong",null,"postcss"),s(" 一种对css编译的工具，类似babel对js的处理，通过它的插件生态来实现各种功能转换，如：autoprefixer(. 自动补全浏览器前缀), px2rem(自动将px转换为rem）"),n("br"),s(" 这里对px2rem配置说明如下：")],-1),d=n("strong",null,"postcss-plugin-px2rem",-1),k={href:"https://www.npmjs.com/package/postcss-px2rem",target:"_blank",rel:"noopener noreferrer"},m=t(`<ol><li>安装依赖：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i postcss-plugin-px2rem  <span class="token parameter variable">-D</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>配置vue.config.js</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>css: <span class="token punctuation">{</span>
      loaderOptions: <span class="token punctuation">{</span>
          postcss: <span class="token punctuation">{</span>
              plugins: <span class="token punctuation">[</span>
                  require<span class="token punctuation">(</span><span class="token string">&#39;postcss-plugin-px2rem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                       rootValue: <span class="token number">100</span>, //换算基数， 默认100  ，这样的话把根标签的字体规定为1rem为50px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。
                      unitPrecision: <span class="token number">5</span>, //允许REM单位增长到的十进制数字。
                      propWhiteList: <span class="token punctuation">[</span><span class="token punctuation">]</span>,  //默认值是一个空数组，这意味着禁用白名单并启用所有属性。
                      propBlackList: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //黑名单
                      exclude: /<span class="token punctuation">(</span>node_module<span class="token punctuation">)</span>/,  //默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/<span class="token punctuation">(</span>node_module<span class="token punctuation">)</span>/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值
                      selectorBlackList: <span class="token punctuation">[</span><span class="token punctuation">]</span>, //要忽略并保留为px的选择器
                      ignoreIdentifier: false,  //（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。
                      replace: true, // （布尔值）替换包含REM的规则，而不是添加回退。
                      mediaQuery: false,  //（布尔值）允许在媒体查询中转换px。
                      minPixelValue: <span class="token number">3</span> //设置要替换的最小像素值<span class="token punctuation">(</span>3px会被转rem<span class="token punctuation">)</span>。 默认 <span class="token number">0</span>
                  <span class="token punctuation">}</span><span class="token punctuation">)</span>,
              <span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>,

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>五、适配方案</p><h3 id="_5-1-rem自适应缩放" tabindex="-1"><a class="header-anchor" href="#_5-1-rem自适应缩放" aria-hidden="true">#</a> 5.1 rem自适应缩放</h3><p><strong>问题1</strong>：比例不是16:9的问题？</p><blockquote><ul><li>当屏幕比16:9 宽时，两侧留白</li><li>当屏幕比16:9 高时，上下留白【这种少见】</li></ul></blockquote><p>通常做法：</p><blockquote><p>我们将pc宽度 screenWidth 分为10等份，其中1等分的值作为html的font-size值，以1920*1080分辨率为基准设置px2rem的rootValue则为192。这种方式有如下2个特点：</p><ul><li>所有长度的比例必然和设计图一致。</li><li>实际的显示长度完全由 html 的 font-size 值决定（线性关系）</li></ul></blockquote><p><strong>问题2</strong>：以上的做法，在16:9的内容窗口中可以做到适配，但当窗口不是16:9时就会出现滚动条，于是我们针对问题1的做法则是当非16:9时，根据超出比例的那一边，对rem对应fontSize进行缩放，</p><ul><li><p><strong>1.1 具体如下</strong>：</p><ol><li>设：设计稿上有任一1条线: A, A 的长度为 <code>x</code> ，计算 rem 值的基准为<code>z</code>，那么 css 里，A 的长度表示为 x z ( r e m ) \\frac{x}{z}(rem) zx​(rem)</li><li>设： 网页在不同分辨率下运行时html的<code>font-size</code>值为 F s F_s Fs​</li><li>那么 A 的实际显示长度就分为: x F s z ( p x ) \\frac{xF_s}{z}(px) zxFs​​(px)</li></ol><ul><li>对于任意一条线，其<code>x, z</code>是固定的值，因而其长度<strong>根据页面运行时网页html的font-size大小而线性变化</strong>， 如在1920的设计宽度下，长100px的线，设计算rem的基准值是192（宽除以10），那么在1366分辨率下html的root-size为136.6, 则100px的线实际长度为<code>100*136.6 / 192</code> (px)</li></ul></li><li><p><strong>1.2 进一步</strong>：<br> 1. 取计算rem值的基准是设计稿宽度的 <code>1/q</code>，假设设计稿宽度为<code>ax</code>, 高度为<code>ay</code>, 则计算rem的基准值<code>z</code>为 a x q \\frac{ax}{q} qax​<br> 2. 按上面公式可以得出浏览器中画布实际的宽，高分别为：<br> 宽 度 ： a x F s a x q = F s q 宽度： \\frac{axF_s}{\\frac{ax}{q}} = F_sq 宽度：qax​axFs​​=Fs​q<br> 高 度 ： a y F s a x q = q y F s x 高度： \\frac{ayF_s}{\\frac{ax}{q}} = \\frac{qyF_s}{x} 高度：qax​ayFs​​=xqyFs​​<br> 3. 浏览器窗口的宽度 w 要等于画布实际的宽度，即<br> w = F s q 由 此 推 导 F s = w q w=F_sq 由此推导 F_s = \\frac{w}{q} w=Fs​q由此推导Fs​=qw​</p></li><li><p><strong>1.3 再进一步： 不同宽高比下如何设置Fs值？</strong></p><ol><li>以常见的在浏览器窗口中举例，浏览器中画布宽度ax与设计稿一致，而高度比设计高度小，这时我们需要将高度调整为浏览器高度，而又严格按照设计稿的宽高比来进行，那么</li><li>设浏览器document高度为<code>h</code> , 设缩小比例为<code>S</code>, 则根据_1.2中2_的公式得出， h = q y F s x S h=\\frac{qyF_s}{x}S h=xqyFs​​S即 S = x h q y F s S=\\frac{xh}{qyF_s} S=qyFs​xh​</li><li>由_1.3中3_的公式中得出<code>Fs</code>的值，代入以上公式可知<br> S = x h y w 即 ： S = 设 计 稿 长 宽 比 实 际 长 宽 比 S = \\frac{xh}{yw} 即：S= \\frac{设计稿长宽比}{实际长宽比} S=ywxh​即：S=实际长宽比设计稿长宽比​</li></ol></li><li><p>*<em>综上</em>：假设设计稿为<code>1920*1080</code>其计算rem的基准值为192px (默认取宽度10等分)，浏览器实际窗口为<code>1920 * 937</code>时rem的基准值则为 <code>192*S</code>，即最终html的fontSize值为166.57px</p></li></ul><p><strong>最终方案：</strong></p><ul><li>index.html</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">designWidth<span class="token punctuation">,</span> minWidth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> docEle <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement
  <span class="token keyword">let</span> screenRatioByDesign <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">/</span><span class="token number">9</span>
  <span class="token keyword">function</span> <span class="token function">setHtmlFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> screenRatio <span class="token operator">=</span> docEle<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> docEle<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
    <span class="token keyword">var</span> fontSize <span class="token operator">=</span> <span class="token punctuation">(</span>
      screenRatio <span class="token operator">&gt;</span> screenRatioByDesign
        <span class="token operator">?</span> <span class="token punctuation">(</span>screenRatioByDesign <span class="token operator">/</span> screenRatio<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">)</span> <span class="token operator">*</span> docEle<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>

    docEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> fontSize<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">setHtmlFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> setHtmlFontSize<span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1920</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>vue.config.js 设置</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token comment">// ...</span>
 <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">loaderOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">postcss</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;postcss-plugin-px2rem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              <span class="token literal-property property">rootValue</span><span class="token operator">:</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token comment">//换算基数， 默认100  ，这样的话把根标签的字体规定为1rem为50px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。</span>
              <span class="token literal-property property">unitPrecision</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">//允许REM单位增长到的十进制数字。</span>
              <span class="token comment">//propWhiteList: [],  //默认值是一个空数组，这意味着禁用白名单并启用所有属性。</span>
              <span class="token comment">// propBlackList: [], //黑名单</span>
              <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(node_module)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>  <span class="token comment">//默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/(node_module)/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值</span>
              <span class="token comment">// selectorBlackList: [], //要忽略并保留为px的选择器</span>
              <span class="token comment">// ignoreIdentifier: false,  //（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。</span>
              <span class="token literal-property property">replace</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// （布尔值）替换包含REM的规则，而不是添加回退。</span>
              <span class="token literal-property property">mediaQuery</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">//（布尔值）允许在媒体查询中转换px。</span>
              <span class="token literal-property property">minPixelValue</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token comment">//设置要替换的最小像素值(3px会被转rem)。 默认 0</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token punctuation">]</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-css3缩放scale" tabindex="-1"><a class="header-anchor" href="#_5-2-css3缩放scale" aria-hidden="true">#</a> 5.2 css3缩放scale</h3><blockquote><p>rem的方案对于1920及以上分辨率屏幕来说基本适用，但当切换到1366*768等小分辨率时，由于浏览器默认最小字体为12px，所以会导致文字比理想效果更多大， 而echarts生成的canvas图中单位是以固定px写死的，也会出现超出画布的问题，因此衍生第二种方案： scale缩放</p></blockquote><ul><li>思路：浏览器body设置为设计稿宽高即1920*1080， 动态根据实际宽高对body的width，height进行缩放，从而实现内容缩放</li></ul><ol><li>body固定宽高：</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span><span class="token punctuation">{</span>
 <span class="token property">width</span><span class="token punctuation">:</span> 1920px<span class="token punctuation">;</span>
 <span class="token property">height</span><span class="token punctuation">:</span> 1080px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>动态获取实际文档宽高并设置body缩放系数</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.html</span>
<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">win</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> bodyStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span>
  bodyStyle<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">body{width:1920px; height:1080px!important;}</span><span class="token template-punctuation string">\`</span></span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>firstElementChild<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>bodyStyle<span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">refreshScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> docWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    <span class="token keyword">let</span> docHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
    <span class="token keyword">var</span> designWidth <span class="token operator">=</span> <span class="token number">1920</span><span class="token punctuation">,</span>
        designHeight <span class="token operator">=</span> <span class="token number">1080</span><span class="token punctuation">,</span>
        widthRatio <span class="token operator">=</span> docWidth <span class="token operator">/</span> designWidth<span class="token punctuation">,</span>
        heightRatio <span class="token operator">=</span> docHeight <span class="token operator">/</span> designHeight<span class="token punctuation">;</span>
     document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">transform:scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>widthRatio<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>heightRatio<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);transform-origin:left top;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
   <span class="token comment">// 应对浏览器全屏切换前后窗口因短暂滚动条问题出现未占满情况</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">var</span> lateWidth<span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
        lateHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>lateWidth<span class="token operator">===</span>docWidth<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

      widthRatio <span class="token operator">=</span> lateWidth<span class="token operator">/</span> designWidth
      heightRatio <span class="token operator">=</span> lateHeight<span class="token operator">/</span> designHeight
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&quot;transform:scale(&quot;</span> <span class="token operator">+</span> widthRatio <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> heightRatio <span class="token operator">+</span> <span class="token string">&quot;);transform-origin:left top;&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">refreshScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;pageshow&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 浏览器后退的时候重新计算</span>
      <span class="token function">refreshScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> refreshScale<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
      

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>经过如上设置后，在项目中直接使用设计稿中px单位进行开发即可，当然这也有一个弊端，在非设计稿比例（16：9）下，界面会被压缩，但它的优势在于会对body内所有元素进行缩放，从而不会让echarts图表超出画布</li></ol><p>六、demo演示</p><blockquote><p>以下demo均在浏览器窗口下展示（即非16:9情况下绘制设计16:9图稿）</p></blockquote><h3 id="_6-1-1366-768分辨率下大屏-rem适配方案" tabindex="-1"><a class="header-anchor" href="#_6-1-1366-768分辨率下大屏-rem适配方案" aria-hidden="true">#</a> 6.1 1366*768分辨率下大屏 rem适配方案</h3><blockquote><p>在1366*768下采用rem方案能够基本适配不出现内容超出的情况（内容少时）<br><img src="https://img-blog.csdnimg.cn/20201125221109860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvcGhpZV9V,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><h3 id="_6-2-1920-1080缩放150-的情况下rem方案" tabindex="-1"><a class="header-anchor" href="#_6-2-1920-1080缩放150-的情况下rem方案" aria-hidden="true">#</a> 6.2 1920*1080缩放150%的情况下rem方案</h3><blockquote><p>在1920*1080分辨率系统缩放到150%时，可以看到此时rem方案已经有缺陷，canvas内图表超出，界面字体未达到设计稿缩放效果<br><img src="https://img-blog.csdnimg.cn/20201125221356999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvcGhpZV9V,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><h3 id="_6-3-1920-1080分辨率150-缩放下scale方案效果" tabindex="-1"><a class="header-anchor" href="#_6-3-1920-1080分辨率150-缩放下scale方案效果" aria-hidden="true">#</a> 6.3 1920*1080分辨率150%缩放下scale方案效果</h3><blockquote><p>采用scale方案，字体不受浏览器最小字体限制，可以自由绽放到该分辨率下对应比例<br><img src="https://img-blog.csdnimg.cn/20201125221527635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvcGhpZV9V,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><p>七、更新</p><blockquote><p>由于在非16:9的情况下，默认效果是保证比例的前提下，居中两边留白，这种一些需求方觉得不好，特别是在只出了16:9的设计稿情况下，需要适配到另一个公司64:27(分辨率7680*3240)这种大屏而且要求要铺满不变形。。。<br> 新痛点：</p><ul><li>UI提出在非16:9的情况下，图形不能被压缩（扁了）</li><li>客户提出在64:27这种宽屏下，两边不能留白太空 最后想出一个最小改动的解决方案，如下先看效果：</li></ul></blockquote><ul><li><p><strong>未优化前7680*3240 （比例64:27的宽屏）</strong>：</p><ul><li>两侧留白，但由于屏幕比16:9宽太多，导致留白特别多<br><img src="https://img-blog.csdnimg.cn/20210108095556153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvcGhpZV9V,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ul></li><li><p><strong>铺满后</strong><br><img src="https://img-blog.csdnimg.cn/20210108095723850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvcGhpZV9V,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></li><li><p><strong>最终解决方案</strong></p><ul><li>设置宽度为浏览器宽度(默认Vue项目)</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">refreshScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">let</span> baseWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
     <span class="token keyword">let</span> baseHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
     <span class="token keyword">let</span> appStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">;</span>
     <span class="token keyword">let</span> realRatio <span class="token operator">=</span> baseWidth<span class="token operator">/</span>baseHeight
     <span class="token keyword">let</span> designRatio <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">/</span><span class="token number">9</span>
     <span class="token keyword">let</span> scaleRate <span class="token operator">=</span>  baseWidth<span class="token operator">/</span><span class="token number">1920</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>realRatio<span class="token operator">&gt;</span>designRatio<span class="token punctuation">)</span><span class="token punctuation">{</span>
       scaleRate <span class="token operator">=</span> baseHeight<span class="token operator">/</span><span class="token number">1080</span>
     <span class="token punctuation">}</span>
     appStyle<span class="token punctuation">.</span>transformOrigin <span class="token operator">=</span> <span class="token string">&#39;left top&#39;</span><span class="token punctuation">;</span>
     appStyle<span class="token punctuation">.</span>transform<span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">scale(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>scaleRate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) translateX(-50%)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
     appStyle<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>baseWidth<span class="token operator">/</span>scaleRate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),v=n("strong",null,"demo代码地址",-1),b=n("li",null,[n("strong",null,"说明"),s("： 1. 本demo基于vue的一套简单代码， 2. 目前可适配到1280*720分辨率。 3. 项目基于vue-cli3搭建，可作为项目模板进行二次开发。 4. 基于echarts封装了基础图表组件 5. 引入了滚动表格组件vue-seamless-scroll 6. 适配代码在"),n("code",null,"assets/js/util")],-1),h=n("strong",null,"clone地址:",-1),g={href:"https://gitee.com/cy-edu/cli-template-dataV.git",target:"_blank",rel:"noopener noreferrer"},x=n("strong",null,"仓库地址",-1),_={href:"https://gitee.com/cy-edu/cli-template-dataV",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.csdn.net/Sophie_U/article/details/109582687",target:"_blank",rel:"noopener noreferrer"};function f(F,w){const a=o("ExternalLinkIcon");return i(),l("div",null,[u,n("ul",null,[r,n("li",null,[d,s(": 作为postcss的经典插件之一，用于自动转换px为rem "),n("a",k,[s("postcss-px2rem文档"),e(a)])])]),m,n("ul",null,[n("li",null,[v,n("ul",null,[b,n("li",null,[h,s(),n("a",g,[s("https://gitee.com/cy-edu/cli-template-dataV.git"),e(a)])]),n("li",null,[x,s("："),n("a",_,[s("https://gitee.com/cy-edu/cli-template-dataV"),e(a)])])])])]),n("p",null,[s("本文转自 "),n("a",y,[s("https://blog.csdn.net/Sophie_U/article/details/109582687"),e(a)]),s("，如有侵权，请联系删除。")])])}const z=p(c,[["render",f],["__file","大屏数据可视化屏幕适配方案.html.vue"]]);export{z as default};
