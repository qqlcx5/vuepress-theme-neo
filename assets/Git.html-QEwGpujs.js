import{_ as s,r as n,c as r,o,a as d,b as e,d as a,e as i}from"./app-7eMFvEA8.js";const c={},l=d(`<h1 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h1><h2 id="集中式与分布式" tabindex="-1"><a class="header-anchor" href="#集中式与分布式" aria-hidden="true">#</a> 集中式与分布式</h2><p>Git 属于分布式版本控制系统，而 SVN 属于集中式。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200656794.png"></div><br><p>集中式版本控制只有中心服务器拥有一份代码，而分布式版本控制每个人的电脑上就有一份完整的代码。</p><p>集中式版本控制有安全性问题，当中心服务器挂了所有人都没办法工作了。</p><p>集中式版本控制需要连网才能工作，如果网速过慢，那么提交一个文件会慢的无法让人忍受。而分布式版本控制不需要连网就能工作。</p><p>分布式版本控制新建分支、合并分支操作速度非常快，而集中式版本控制新建一个分支相当于复制一份完整代码。</p><h2 id="中心服务器" tabindex="-1"><a class="header-anchor" href="#中心服务器" aria-hidden="true">#</a> 中心服务器</h2><p>中心服务器用来交换每个用户的修改，没有中心服务器也能工作，但是中心服务器能够 24 小时保持开机状态，这样就能更方便的交换修改。</p><p>Github 就是一个中心服务器。</p><h2 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流" aria-hidden="true">#</a> 工作流</h2><p>新建一个仓库之后，当前目录就成为了工作区，工作区下有一个隐藏目录 .git，它属于 Git 的版本库。</p><p>Git 的版本库有一个称为 Stage 的暂存区以及最后的 History 版本库，History 存储所有分支信息，使用一个 HEAD 指针指向当前分支。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208195941661.png"></div><br><ul><li>git add files 把文件的修改添加到暂存区</li><li>git commit 把暂存区的修改提交到当前分支，提交之后暂存区就被清空了</li><li>git reset -- files 使用当前分支上的修改覆盖暂存区，用来撤销最后一次 git add files</li><li>git checkout -- files 使用暂存区的修改覆盖工作目录，用来撤销本地修改</li></ul><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200014395.png"></div><br><p>可以跳过暂存区域直接从分支中取出修改，或者直接提交修改到分支中。</p><ul><li>git commit -a 直接把所有文件的修改添加到暂存区然后执行提交</li><li>git checkout HEAD -- files 取出最后一次修改，可以用来进行回滚操作</li></ul><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208200543923.png"></div><br><h2 id="分支实现" tabindex="-1"><a class="header-anchor" href="#分支实现" aria-hidden="true">#</a> 分支实现</h2><p>使用指针将每个提交连接成一条时间线，HEAD 指针指向当前分支指针。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203219927.png"></div><br><p>新建分支是新建一个指针指向时间线的最后一个节点，并让 HEAD 指针指向新分支，表示新分支成为当前分支。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203142527.png"></div><br><p>每次提交只会让当前分支指针向前移动，而其它分支指针不会移动。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203112400.png"></div><br><p>合并分支也只需要改变指针即可。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203010540.png"></div><br><h2 id="冲突" tabindex="-1"><a class="header-anchor" href="#冲突" aria-hidden="true">#</a> 冲突</h2><p>当两个分支都对同一个文件的同一行进行了修改，在分支合并时就会产生冲突。</p><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203034705.png"></div><br><p>Git 会使用 &lt;&lt;&lt;&lt;&lt;&lt;&lt; ，======= ，&gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记出不同分支的内容，只需要把不同分支中冲突部分修改成一样就能解决冲突。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Creating a new branch is quick AND simple.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="fast-forward" tabindex="-1"><a class="header-anchor" href="#fast-forward" aria-hidden="true">#</a> Fast forward</h2><p>&quot;快进式合并&quot;（fast-farward merge），会直接将 master 分支指向合并的分支，这种模式下进行分支合并会丢失分支信息，也就不能在分支历史上看出分支信息。</p><p>可以在合并时加上 --no-ff 参数来禁用 Fast forward 模式，并且加上 -m 参数让合并时产生一个新的 commit。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge --no-ff <span class="token parameter variable">-m</span> <span class="token string">&quot;merge with no-ff&quot;</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div align="center"><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/image-20191208203639712.png"></div><br><h2 id="储藏-stashing" tabindex="-1"><a class="header-anchor" href="#储藏-stashing" aria-hidden="true">#</a> 储藏（Stashing）</h2><p>在一个分支上操作之后，如果还没有将修改提交到分支上，此时进行切换分支，那么另一个分支上也能看到新的修改。这是因为所有分支都共用一个工作区的缘故。</p><p>可以使用 git stash 将当前分支的修改储藏起来，此时当前工作区的所有修改都会被存到栈中，也就是说当前工作区是干净的，没有任何未提交的修改。此时就可以安全的切换到其它分支上了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> stash
Saved working directory and index state <span class="token punctuation">\\</span> <span class="token string">&quot;WIP on master: 049d078 added the index file&quot;</span>
HEAD is now at 049d078 added the index <span class="token function">file</span> <span class="token punctuation">(</span>To restore them <span class="token builtin class-name">type</span> <span class="token string">&quot;git stash apply&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该功能可以用于 bug 分支的实现。如果当前正在 dev 分支上进行开发，但是此时 master 上有个 bug 需要修复，但是 dev 分支上的开发还未完成，不想立即提交。在新建 bug 分支并切换到 bug 分支之前就需要使用 git stash 将 dev 分支的未提交修改储藏起来。</p><h2 id="ssh-传输设置" tabindex="-1"><a class="header-anchor" href="#ssh-传输设置" aria-hidden="true">#</a> SSH 传输设置</h2><p>Git 仓库和 Github 中心仓库之间的传输是通过 SSH 加密。</p><p>如果工作区下没有 .ssh 目录，或者该目录下没有 id_rsa 和 id_rsa.pub 这两个文件，可以通过以下命令来创建 SSH Key：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;youremail@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后把公钥 id_rsa.pub 的内容复制到 Github &quot;Account settings&quot; 的 SSH Keys 中。</p><h2 id="gitignore-文件" tabindex="-1"><a class="header-anchor" href="#gitignore-文件" aria-hidden="true">#</a> .gitignore 文件</h2><p>忽略以下文件：</p><ul><li>操作系统自动生成的文件，比如缩略图；</li><li>编译生成的中间文件，比如 Java 编译产生的 .class 文件；</li><li>自己的敏感信息，比如存放口令的配置文件。</li></ul>`,62),h={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"git-命令一览",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-命令一览","aria-hidden":"true"},"#"),a(" Git 命令一览")],-1),p=e("div",{align:"center"},[e("img",{src:"https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7a29acce-f243-4914-9f00-f2988c528412.jpg",width:""})],-1),u=e("br",null,null,-1),m={href:"http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),v={href:"http://rogerdudler.github.io/git-guide/index.zh.html",target:"_blank",rel:"noopener noreferrer"},f={href:"http://marklodato.github.io/visual-git-guide/index-zh-cn.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000",target:"_blank",rel:"noopener noreferrer"},k={href:"https://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"};function x(q,y){const t=n("ExternalLinkIcon");return o(),r("div",null,[l,e("p",null,[a("不需要全部自己编写，可以到 "),e("a",h,[a("https://github.com/github/gitignore"),i(t)]),a(" 中进行查询。")]),g,p,u,e("p",null,[a("比较详细的地址："),e("a",m,[a("http://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf"),i(t)])]),b,e("ul",null,[e("li",null,[e("a",v,[a("Git - 简明指南"),i(t)])]),e("li",null,[e("a",f,[a("图解 Git"),i(t)])]),e("li",null,[e("a",_,[a("廖雪峰 : Git 教程"),i(t)])]),e("li",null,[e("a",k,[a("Learn Git Branching"),i(t)])])])])}const G=s(c,[["render",x],["__file","Git.html.vue"]]);export{G as default};
