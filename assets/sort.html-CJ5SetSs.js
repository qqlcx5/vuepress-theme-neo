import{_ as i,c as a,o as e,a as p}from"./app-7eMFvEA8.js";const l={},h=p('<h1 id="面试官-说说常见的排序算法有哪些-区别" tabindex="-1"><a class="header-anchor" href="#面试官-说说常见的排序算法有哪些-区别" aria-hidden="true">#</a> 面试官：说说常见的排序算法有哪些？区别？</h1><p><img src="https://static.vue-js.com/63eb7920-211c-11ec-a752-75723a64e8f5.png" alt=""></p><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么" aria-hidden="true">#</a> 一、是什么</h2><p>排序是程序开发中非常常见的操作，对一组任意的数据元素经过排序操作后，就可以把他们变成一组一定规则排序的有序序列</p><p>排序算法属于算法中的一种，而且是覆盖范围极小的一种，彻底掌握排序算法对程序开发是有很大的帮助的</p><p>对与排序算法的好坏衡量，主要是从时间复杂度、空间复杂度、稳定性</p><p>时间复杂度、空间复杂度前面已经讲过，这里主要看看稳定性的定义</p><p>稳定性指的是假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变</p><p>即在原序列中，r[i] = r[j]，且 r[i] 在 r[j] 之前，而在排序后的序列中，r[i] 仍在 r[j] 之前，则称这种排序算法是稳定的；否则称为不稳定的</p><h2 id="二、有哪些" tabindex="-1"><a class="header-anchor" href="#二、有哪些" aria-hidden="true">#</a> 二、有哪些</h2><p>常见的算法排序算法有：</p><ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>归并排序</li><li>快速排序</li></ul><h3 id="冒泡排序" tabindex="-1"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h3><p>一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来</p><p>思路如下：</p><ul><li><p>比较相邻的元素，如果第一个比第二个大，就交换它们两个</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个</p></li><li><p>重复上述步骤，直到没有任何一堆数字需要比较</p></li></ul><p><img src="https://pic4.zhimg.com/v2-33a947c71ad62b254cab62e5364d2813_b.webp" alt=""></p><h3 id="选择排序" tabindex="-1"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h3><p>选择排序是一种简单直观的排序算法，它也是一种交换排序算法</p><p>无论什么数据进去都是 <code>O(n²) </code>的时间复杂度。所以用到它的时候，数据规模越小越好</p><p>唯一的好处是不占用额外的内存存储空间</p><p>思路如下：</p><ul><li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置</li><li>从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕</li></ul><p><img src="https://pic1.zhimg.com/v2-1c7e20f306ddc02eb4e3a50fa7817ff4_b.webp" alt=""></p><h3 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h3><p>插入排序是一种简单直观的排序算法</p><p>它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p><p>解决思路如下：</p><ul><li>把待排序的数组分成已排序和未排序两部分，初始的时候把第一个元素认为是已排好序的</li><li>从第二个元素开始，在已排好序的子数组中寻找到该元素合适的位置并插入该位置（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li><li>重复上述过程直到最后一个元素被插入有序子数组中</li></ul><p><img src="https://pic3.zhimg.com/v2-91b76e8e4dab9b0cad9a017d7dd431e2_b.webp" alt=""></p><h3 id="归并排序" tabindex="-1"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h3><p>归并排序是建立在归并操作上的一种有效的排序算法</p><p>该算法是采用分治法的一个非常典型的应用</p><p>将已有序的子序列合并，得到完全有序的序列，即先使每个子序列有序，再使子序列段间有序</p><p>解决思路如下：</p><ul><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ul><p><img src="https://pic3.zhimg.com/v2-cdda3f11c6efbc01577f5c29a9066772_b.jpg" alt=""></p><h3 id="快速排序" tabindex="-1"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h3><p>快速排序是对冒泡排序算法的一种改进，基本思想是通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据比另一部分的所有数据要小</p><p>再按这种方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，使整个数据变成有序序列</p><p>解决思路如下：</p><ul><li>从数列中挑出一个元素，称为&quot;基准&quot;（pivot）</li><li>重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</li><li>递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序</li></ul><p><img src="https://pic1.zhimg.com/v2-c411339b79f92499dcb7b5f304c826f4_b.jpg" alt=""></p><h2 id="三、区别" tabindex="-1"><a class="header-anchor" href="#三、区别" aria-hidden="true">#</a> 三、区别</h2><p>除了上述的排序算法之外，还存在其他的排序算法，例如希尔排序、堆排序等等......</p><p>区别如下图所示：</p><p><img src="https://static.vue-js.com/5c3d7b50-2131-11ec-a752-75723a64e8f5.png" alt=""></p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>https://www.runoob.com/w3cnote/bubble-sort.html</li><li>http://www.x-lab.info/post/sort-algorithm/</li><li>https://zhuanlan.zhihu.com/p/42586566</li></ul>',49),r=[h];function t(c,d){return e(),a("div",null,r)}const n=i(l,[["render",t],["__file","sort.html.vue"]]);export{n as default};
