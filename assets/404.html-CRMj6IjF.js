import{_ as n,c as e,o as a,a as s}from"./app-7eMFvEA8.js";const i={},c=s(`<h1 id="面试官-vue项目本地开发完成后部署到服务器后报404是什么原因呢" tabindex="-1"><a class="header-anchor" href="#面试官-vue项目本地开发完成后部署到服务器后报404是什么原因呢" aria-hidden="true">#</a> 面试官：vue项目本地开发完成后部署到服务器后报404是什么原因呢？</h1><p><img src="https://static.vue-js.com/002c9320-4f3e-11eb-ab90-d9ae814b240d.png" alt="image.png"></p><h2 id="一、如何部署" tabindex="-1"><a class="header-anchor" href="#一、如何部署" aria-hidden="true">#</a> 一、如何部署</h2><p>前后端分离开发模式下，前后端是独立布署的，前端只需要将最后的构建物上传至目标服务器的<code>web</code>容器指定的静态目录下即可</p><p>我们知道<code>vue</code>项目在构建后，是生成一系列的静态文件</p><p><img src="https://imgkr2.cn-bj.ufileos.com/b9d13e56-f859-4b4b-a9da-a703a34c2f5d.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&amp;Signature=m1qDXRSFHrfXlnAtAlVhjoLKP70%3D&amp;Expires=1609927181" alt=""></p><p>常规布署我们只需要将这个目录上传至目标服务器即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// <span class="token function">scp</span> 上传 user为主机登录用户，host为主机外网ip, xx为web容器静态资源路径
<span class="token function">scp</span> dist.zip user@host:/xx/xx/xx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>让<code>web</code>容器跑起来，以<code>nginx</code>为例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
  listen  <span class="token number">80</span><span class="token punctuation">;</span>
  server_name  www.xxx.com<span class="token punctuation">;</span>

  location / <span class="token punctuation">{</span>
    index  /data/dist/index.html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成记得重启<code>nginx</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 检查配置是否正确
nginx <span class="token parameter variable">-t</span> 

// 平滑重启
nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作完后就可以在浏览器输入域名进行访问了</p><p>当然上面只是提到最简单也是最直接的一种布署方式</p><p>什么自动化，镜像，容器，流水线布署，本质也是将这套逻辑抽象，隔离，用程序来代替重复性的劳动，本文不展开</p><h2 id="二、404问题" tabindex="-1"><a class="header-anchor" href="#二、404问题" aria-hidden="true">#</a> 二、404问题</h2><p>这是一个经典的问题，相信很多同学都有遇到过，那么你知道其真正的原因吗？</p><p>我们先还原一下场景：</p><ul><li><code>vue</code>项目在本地时运行正常，但部署到服务器中，刷新页面，出现了404错误</li></ul><p>先定位一下，HTTP 404 错误意味着链接指向的资源不存在</p><p>问题在于为什么不存在？且为什么只有<code>history</code>模式下会出现这个问题？</p><h3 id="为什么history模式下有问题" tabindex="-1"><a class="header-anchor" href="#为什么history模式下有问题" aria-hidden="true">#</a> 为什么history模式下有问题</h3><p><code>Vue</code>是属于单页应用（single-page application）</p><p>而<code>SPA</code>是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，前面我们也看到了，不管我们应用有多少页面，构建物都只会产出一个<code>index.html</code></p><p>现在，我们回头来看一下我们的<code>nginx</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server <span class="token punctuation">{</span>
  listen  <span class="token number">80</span><span class="token punctuation">;</span>
  server_name  www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com<span class="token punctuation">;</span>

  location <span class="token operator">/</span> <span class="token punctuation">{</span>
    index  <span class="token operator">/</span>data<span class="token operator">/</span>dist<span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以根据 <code>nginx</code> 配置得出，当我们在地址栏输入 <code>www.xxx.com</code> 时，这时会打开我们 <code>dist</code> 目录下的 <code>index.html</code> 文件，然后我们在跳转路由进入到 <code>www.xxx.com/login</code></p><p>关键在这里，当我们在 <code>website.com/login</code> 页执行刷新操作，<code>nginx location</code> 是没有相关配置的，所以就会出现 404 的情况</p><h3 id="为什么hash模式下没有问题" tabindex="-1"><a class="header-anchor" href="#为什么hash模式下没有问题" aria-hidden="true">#</a> 为什么hash模式下没有问题</h3><p><code>router hash</code> 模式我们都知道是用符号#表示的，如 <code>website.com/#/login</code>, <code>hash</code> 的值为 <code>#/login</code></p><p>它的特点在于：<code>hash</code> 虽然出现在 <code>URL</code> 中，但不会被包括在 <code>HTTP</code> 请求中，对服务端完全没有影响，因此改变 <code>hash</code> 不会重新加载页面</p><p><code>hash</code> 模式下，仅 <code>hash</code> 符号之前的内容会被包含在请求中，如 <code>website.com/#/login</code> 只有 <code>website.com</code> 会被包含在请求中 ，因此对于服务端来说，即使没有配置<code>location</code>，也不会返回404错误</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>看到这里我相信大部分同学都能想到怎么解决问题了，</p><p>产生问题的本质是因为我们的路由是通过JS来执行视图切换的，</p><p>当我们进入到子路由时刷新页面，<code>web</code>容器没有相对应的页面此时会出现404</p><p>所以我们只需要配置将任意页面都重定向到 <code>index.html</code>，把路由交由前端处理</p><p>对<code>nginx</code>配置文件<code>.conf</code>修改，添加<code>try_files $uri $uri/ /index.html;</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server <span class="token punctuation">{</span>
  listen  <span class="token number">80</span><span class="token punctuation">;</span>
  server_name  www.xxx.com<span class="token punctuation">;</span>

  location / <span class="token punctuation">{</span>
    index  /data/dist/index.html<span class="token punctuation">;</span>
    try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完配置文件后记得配置的更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这么做以后，你的服务器就不再返回 404 错误页面，因为对于所有路径都会返回 <code>index.html</code> 文件</p><p>为了避免这种情况，你应该在 <code>Vue</code> 应用里面覆盖所有的路由情况，然后在给出一个 404 页面</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;history&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> NotFoundComponent <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于后端配置方案还有：<code>Apache</code>、<code>nodejs</code>等，思想是一致的，这里就不展开述说了</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>https://juejin.cn/post/6844903872637632525</li><li>https://vue-js.com/topic/5f8cf91d96b2cb0032c385c0</li></ul>`,47),o=[c];function d(p,t){return a(),e("div",null,o)}const r=n(i,[["render",d],["__file","404.html.vue"]]);export{r as default};
