import{_ as a,c as n,o as s,a as e}from"./app-7eMFvEA8.js";const c={},t=e(`<h1 id="面试官-说说-node-js-有哪些全局对象" tabindex="-1"><a class="header-anchor" href="#面试官-说说-node-js-有哪些全局对象" aria-hidden="true">#</a> 面试官：说说 Node. js 有哪些全局对象？</h1><p><img src="https://static.vue-js.com/79c7b100-c2a3-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h2 id="一、是什么" tabindex="-1"><a class="header-anchor" href="#一、是什么" aria-hidden="true">#</a> 一、是什么</h2><p>在浏览器 <code>JavaScript</code> 中，通常<code> window</code> 是全局对象， 而 <code>Nodejs </code>中的全局对象是 <code>global</code></p><p>在<code>NodeJS</code>里，是不可能在最外层定义一个变量，因为所有的用户代码都是当前模块的，只在当前模块里可用，但可以通过<code>exports</code>对象的使用将其传递给模块外部</p><p>所以，在<code>NodeJS</code>中，用<code>var</code>声明的变量并不属于全局的变量，只在当前模块生效</p><p>像上述的<code>global</code>全局对象则在全局作用域中，任何全局变量、函数、对象都是该对象的一个属性值</p><h2 id="二、有哪些" tabindex="-1"><a class="header-anchor" href="#二、有哪些" aria-hidden="true">#</a> 二、有哪些</h2><p>将全局对象分成两类：</p><ul><li><p>真正的全局对象</p></li><li><p>模块级别的全局变量</p></li></ul><h3 id="真正的全局对象" tabindex="-1"><a class="header-anchor" href="#真正的全局对象" aria-hidden="true">#</a> 真正的全局对象</h3><p>下面给出一些常见的全局对象：</p><ul><li><p>Class:Buffer</p></li><li><p>process</p></li><li><p>console</p></li><li><p>clearInterval、setInterval</p></li><li><p>clearTimeout、setTimeout</p></li><li><p>global</p></li></ul><h4 id="class-buffer" tabindex="-1"><a class="header-anchor" href="#class-buffer" aria-hidden="true">#</a> Class:Buffer</h4><p>可以处理二进制以及非<code>Unicode</code>编码的数据</p><p>在<code>Buffer</code>类实例化中存储了原始数据。<code>Buffer</code>类似于一个整数数组，在V8堆原始存储空间给它分配了内存</p><p>一旦创建了<code>Buffer</code>实例，则无法改变大小</p><h4 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> process</h4><p>进程对象，提供有关当前进程的信息和控制</p><p>包括在执行<code>node</code>程序进程时，如果需要传递参数，我们想要获取这个参数需要在<code>process</code>内置对象中</p><p>启动进程：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code> node index.js 参数1 参数2 参数3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>index.js文件如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>node
<span class="token operator">/</span>Users<span class="token operator">/</span>mjr<span class="token operator">/</span>work<span class="token operator">/</span>node<span class="token operator">/</span>process<span class="token operator">-</span>args<span class="token punctuation">.</span>js
参数<span class="token number">1</span>
参数<span class="token number">2</span>
参数<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，还包括一些其他信息如版本、操作系统等</p><p><img src="https://static.vue-js.com/85f473a0-c2a3-11eb-ab90-d9ae814b240d.png" alt=""></p><h4 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> console</h4><p>用来打印<code>stdout</code>和<code>stderr</code></p><p>最常用的输入内容的方式：console.log</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>清空控制台：console.clear</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span>clear
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打印函数的调用栈：console.trace</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://static.vue-js.com/91b6dbb0-c2a3-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h4 id="clearinterval、setinterval" tabindex="-1"><a class="header-anchor" href="#clearinterval、setinterval" aria-hidden="true">#</a> clearInterval、setInterval</h4><p>设置定时器与清除定时器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>callback</code>每<code>delay</code>毫秒重复执行一次</p><p><code>clearInterval</code>则为对应发取消定时器的方法</p><h4 id="cleartimeout、settimeout" tabindex="-1"><a class="header-anchor" href="#cleartimeout、settimeout" aria-hidden="true">#</a> clearTimeout、setTimeout</h4><p>设置延时器与清除延时器</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span>delay<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>callback</code>在<code>delay</code>毫秒后执行一次</p><p><code>clearTimeout</code>则为对应取消延时器的方法</p><h4 id="global" tabindex="-1"><a class="header-anchor" href="#global" aria-hidden="true">#</a> global</h4><p>全局命名空间对象，墙面讲到的<code>process</code>、<code>console</code>、<code>setTimeout</code>等都有放到<code>global</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process <span class="token operator">===</span> global<span class="token punctuation">.</span>process<span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="模块级别的全局对象" tabindex="-1"><a class="header-anchor" href="#模块级别的全局对象" aria-hidden="true">#</a> 模块级别的全局对象</h3><p>这些全局对象是模块中的变量，只是每个模块都有，看起来就像全局变量，像在命令交互中是不可以使用，包括：</p><ul><li>__dirname</li><li>__filename</li><li>exports</li><li>module</li><li>require</li></ul><h4 id="dirname" tabindex="-1"><a class="header-anchor" href="#dirname" aria-hidden="true">#</a> __dirname</h4><p>获取当前文件所在的路径，不包括后面的文件名</p><p>从 <code>/Users/mjr</code> 运行 <code>node example.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: /Users/mjr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="filename" tabindex="-1"><a class="header-anchor" href="#filename" aria-hidden="true">#</a> __filename</h4><p>获取当前文件所在的路径和文件名称，包括后面的文件名称</p><p>从 <code>/Users/mjr</code> 运行 <code>node example.js</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印: /Users/mjr/example.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h4><p><code>module.exports</code> 用于指定一个模块所导出的内容，即可以通过 <code>require()</code> 访问的内容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h4><p>对当前模块的引用，通过<code>module.exports</code> 用于指定一个模块所导出的内容，即可以通过 <code>require()</code> 访问的内容</p><h4 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h4><p>用于引入模块、 <code>JSON</code>、或本地文件。 可以从 <code>node_modules</code> 引入模块。</p><p>可以使用相对路径引入本地模块或<code>JSON</code>文件，路径会根据<code>__dirname</code>定义的目录名或当前工作目录进行处理</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>http://nodejs.cn/api/globals.html</li><li>https://vue3js.cn/interview</li></ul>`,71),o=[t];function p(i,l){return s(),n("div",null,o)}const r=a(c,[["render",p],["__file","global.html.vue"]]);export{r as default};
