import{_ as a,c as s,o as n,a as e}from"./app-7eMFvEA8.js";const t={},o=e(`<h1 id="面试官-vue常用的修饰符有哪些有什么应用场景" tabindex="-1"><a class="header-anchor" href="#面试官-vue常用的修饰符有哪些有什么应用场景" aria-hidden="true">#</a> 面试官：Vue常用的修饰符有哪些有什么应用场景</h1><p><img src="https://static.vue-js.com/8f718e30-42c0-11eb-ab90-d9ae814b240d.png" alt=""></p><h2 id="一、修饰符是什么" tabindex="-1"><a class="header-anchor" href="#一、修饰符是什么" aria-hidden="true">#</a> 一、修饰符是什么</h2><p>在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号</p><p>在<code>Vue</code>中，修饰符处理了许多<code>DOM</code>事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理</p><p><code>vue</code>中修饰符分为以下五种：</p><ul><li>表单修饰符</li><li>事件修饰符</li><li>鼠标按键修饰符</li><li>键值修饰符</li><li>v-bind修饰符</li></ul><h2 id="二、修饰符的作用" tabindex="-1"><a class="header-anchor" href="#二、修饰符的作用" aria-hidden="true">#</a> 二、修饰符的作用</h2><h3 id="表单修饰符" tabindex="-1"><a class="header-anchor" href="#表单修饰符" aria-hidden="true">#</a> 表单修饰符</h3><p>在我们填写表单的时候用得最多的是<code>input</code>标签，指令用得最多的是<code>v-model</code></p><p>关于表单的修饰符有如下：</p><ul><li>lazy</li><li>trim</li><li>number</li></ul><h4 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> lazy</h4><p>在我们填完信息，光标离开标签的时候，才会将值赋予给<code>value</code>，也就是在<code>change</code>事件之后再进行信息同步</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="trim" tabindex="-1"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> trim</h4><p>自动过滤用户输入的首空格字符，而中间的空格不会过滤</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">&quot;value&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> number</h4><p>自动将用户的输入值转为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">&quot;age&quot;</span> type<span class="token operator">=</span><span class="token string">&quot;number&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h3><p>事件修饰符是对事件捕获以及目标进行了处理，有如下修饰符：</p><ul><li>stop</li><li>prevent</li><li>self</li><li>once</li><li>capture</li><li>passive</li><li>native</li></ul><h4 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop</h4><p>阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">//只输出1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="prevent" tabindex="-1"><a class="header-anchor" href="#prevent" aria-hidden="true">#</a> prevent</h4><p>阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token operator">:</span>submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">&quot;onSubmit&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="self" tabindex="-1"><a class="header-anchor" href="#self" aria-hidden="true">#</a> self</h4><p>只当在 <code>event.target</code> 是当前元素自身时触发处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">&quot;doThat&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止<strong>所有的点击</strong>，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击</p></blockquote><h4 id="once" tabindex="-1"><a class="header-anchor" href="#once" aria-hidden="true">#</a> once</h4><p>绑定了事件以后只能触发一次，第二次就不会触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="capture" tabindex="-1"><a class="header-anchor" href="#capture" aria-hidden="true">#</a> capture</h4><p>使事件触发从包含这个元素的顶层开始往下触发</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>
    obj1
<span class="token operator">&lt;</span>div @click<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">&quot;shout(2)&quot;</span><span class="token operator">&gt;</span>
    obj2
<span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(3)&quot;</span><span class="token operator">&gt;</span>
    obj3
<span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">&quot;shout(4)&quot;</span><span class="token operator">&gt;</span>
    obj4
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token comment">// 输出结构: 1 2 4 3 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="passive" tabindex="-1"><a class="header-anchor" href="#passive" aria-hidden="true">#</a> passive</h4><p>在移动端，当我们在监听元素滚动事件的时候，会一直触发<code>onscroll</code>事件会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给<code>onscroll</code>事件整了一个<code>.lazy</code>修饰符</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">滚动事件的默认行为</span> <span class="token punctuation">(</span>即滚动行为<span class="token punctuation">)</span> 将会立即触发 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 而不会等待 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">onScroll</span><span class="token template-punctuation string">\`</span></span> 完成  <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这其中包含 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">event.preventDefault()</span><span class="token template-punctuation string">\`</span></span> 的情况 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token operator">:</span>scroll<span class="token punctuation">.</span>passive<span class="token operator">=</span><span class="token string">&quot;onScroll&quot;</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要把 <code>.passive</code> 和 <code>.prevent</code> 一起使用,因为 <code>.prevent</code> 将会被忽略，同时浏览器可能会向你展示一个警告。</p><p><code>passive</code> 会告诉浏览器你不想阻止事件的默认行为</p></blockquote><h4 id="native" tabindex="-1"><a class="header-anchor" href="#native" aria-hidden="true">#</a> native</h4><p>让组件变成像<code>html</code>内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>my<span class="token operator">-</span>component v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">&quot;doSomething&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>使用.native修饰符来操作普通HTML标签是会令事件失效的</p></blockquote><h3 id="鼠标按钮修饰符" tabindex="-1"><a class="header-anchor" href="#鼠标按钮修饰符" aria-hidden="true">#</a> 鼠标按钮修饰符</h3><p>鼠标按钮修饰符针对的就是左键、右键、中键点击，有如下：</p><ul><li>left 左键点击</li><li>right 右键点击</li><li>middle 中键点击</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>middle<span class="token operator">=</span><span class="token string">&quot;shout(1)&quot;</span><span class="token operator">&gt;</span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="键盘修饰符" tabindex="-1"><a class="header-anchor" href="#键盘修饰符" aria-hidden="true">#</a> 键盘修饰符</h3><p>键盘修饰符是用来修饰键盘事件（<code>onkeyup</code>，<code>onkeydown</code>）的，有如下：</p><p><code>keyCode</code>存在很多，但<code>vue</code>为我们提供了别名，分为以下两种：</p><ul><li>普通键（enter、tab、delete、space、esc、up...）</li><li>系统修饰键（ctrl、alt、meta、shift...）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 只有按键为keyCode的时候才触发</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span> @keyup<span class="token punctuation">.</span>keyCode<span class="token operator">=</span><span class="token string">&quot;shout()&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过以下方式自定义一些全局的键盘码别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f2 <span class="token operator">=</span> <span class="token number">113</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="v-bind修饰符" tabindex="-1"><a class="header-anchor" href="#v-bind修饰符" aria-hidden="true">#</a> v-bind修饰符</h3><p>v-bind修饰符主要是为属性进行操作，用来分别有如下：</p><ul><li>async</li><li>prop</li><li>camel</li></ul><h4 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> async</h4><p>能对<code>props</code>进行一个双向绑定</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父组件</span>
<span class="token operator">&lt;</span>comp <span class="token operator">:</span>myMessage<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span> 
<span class="token comment">//子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:myMessage&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这种方法相当于以下的简写</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//父亲组件</span>
<span class="token operator">&lt;</span>comp <span class="token operator">:</span>myMessage<span class="token operator">=</span><span class="token string">&quot;bar&quot;</span> @update<span class="token operator">:</span>myMessage<span class="token operator">=</span><span class="token string">&quot;func&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">&gt;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> e<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//子组件js</span>
<span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;update:myMessage&#39;</span><span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>async</code>需要注意以下两点：</p><ul><li><p>使用<code>sync</code>的时候，子组件传递的事件名格式必须为<code>update:value</code>，其中<code>value</code>必须与子组件中<code>props</code>中声明的名称完全一致</p></li><li><p>注意带有 <code>.sync</code> 修饰符的 <code>v-bind</code> 不能和表达式一起使用</p></li><li><p>将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=”{ title: doc.title }”</code>，是无法正常工作的</p></li></ul><h4 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h4><p>设置自定义标签属性，避免暴露数据，防止污染HTML结构</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;uid&quot;</span> title<span class="token operator">=</span><span class="token string">&quot;title1&quot;</span> value<span class="token operator">=</span><span class="token string">&quot;1&quot;</span> <span class="token operator">:</span>index<span class="token punctuation">.</span>prop<span class="token operator">=</span><span class="token string">&quot;index&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="camel" tabindex="-1"><a class="header-anchor" href="#camel" aria-hidden="true">#</a> camel</h4><p>将命名变为驼峰命名法，如将<code> view-Box</code>属性名转换为 <code>viewBox</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>svg <span class="token operator">:</span>viewBox<span class="token operator">=</span><span class="token string">&quot;viewBox&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="三、应用场景" tabindex="-1"><a class="header-anchor" href="#三、应用场景" aria-hidden="true">#</a> 三、应用场景</h2><p>根据每一个修饰符的功能，我们可以得到以下修饰符的应用场景：</p><ul><li>.stop：阻止事件冒泡</li><li>.native：绑定原生事件</li><li>.once：事件只执行一次</li><li>.self ：将事件绑定在自身身上，相当于阻止事件冒泡</li><li>.prevent：阻止默认事件</li><li>.caption：用于事件捕获</li><li>.once：只触发一次</li><li>.keyCode：监听特定键盘按下</li><li>.right：右键</li></ul><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><ul><li>https://segmentfault.com/a/1190000016786254</li><li>https://vue3js.cn/docs/zh</li></ul>`,80),p=[o];function r(l,c){return n(),s("div",null,p)}const d=a(t,[["render",r],["__file","modifier.html.vue"]]);export{d as default};
